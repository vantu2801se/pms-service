// Code generated by MockGen. DO NOT EDIT.
// Source: ./client/rds/client.go

// Package rdsmock is a generated GoMock package.
package rdsmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vantu2801se/product-manager-system/models"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockClient) CreateProduct(p *models.ProductDto) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", p)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockClientMockRecorder) CreateProduct(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockClient)(nil).CreateProduct), p)
}

// GetCategories mocks base method.
func (m *MockClient) GetCategories() ([]*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories")
	ret0, _ := ret[0].([]*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockClientMockRecorder) GetCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockClient)(nil).GetCategories))
}

// GetProductCount mocks base method.
func (m *MockClient) GetProductCount() ([]models.ProductCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCount")
	ret0, _ := ret[0].([]models.ProductCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCount indicates an expected call of GetProductCount.
func (mr *MockClientMockRecorder) GetProductCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCount", reflect.TypeOf((*MockClient)(nil).GetProductCount))
}

// GetProducts mocks base method.
func (m *MockClient) GetProducts(status []string, offset, limit int) ([]models.ProductModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", status, offset, limit)
	ret0, _ := ret[0].([]models.ProductModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockClientMockRecorder) GetProducts(status, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockClient)(nil).GetProducts), status, offset, limit)
}
